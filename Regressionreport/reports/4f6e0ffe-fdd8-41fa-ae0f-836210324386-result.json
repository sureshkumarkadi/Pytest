{"name": "test_openbrowser", "status": "failed", "statusDetails": {"message": "AssertionError: Test case No failed", "trace": "self = <test_logintest00001.openbrowser testMethod=test_openbrowser>\n\n    @allure.severity(allure.severity_level.MINOR)\n    def test_openbrowser(self):\n      try:\n        #print('enter')\n        browser = reg.openbrowser()\n        time.sleep(3)\n        #reg.inputurl(browser)\n        gettitle = browser.title\n        print(gettitle)\n>       self.assertEqual(gettitle, 'Google')\n\ntest_logintest00001.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_logintest00001.openbrowser testMethod=test_openbrowser>, first = ''\nsecond = 'Google', msg = None\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nd:\\python37\\lib\\unittest\\case.py:839: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_logintest00001.openbrowser testMethod=test_openbrowser>, first = ''\nsecond = 'Google', msg = None\n\n    def assertMultiLineEqual(self, first, second, msg=None):\n        \"\"\"Assert that two multi-line strings are equal.\"\"\"\n        self.assertIsInstance(first, str, 'First argument is not a string')\n        self.assertIsInstance(second, str, 'Second argument is not a string')\n    \n        if first != second:\n            # don't use difflib if the strings are too long\n            if (len(first) > self._diffThreshold or\n                len(second) > self._diffThreshold):\n                self._baseAssertEqual(first, second, msg)\n            firstlines = first.splitlines(keepends=True)\n            secondlines = second.splitlines(keepends=True)\n            if len(firstlines) == 1 and first.strip('\\r\\n') == first:\n                firstlines = [first + '\\n']\n                secondlines = [second + '\\n']\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            diff = '\\n' + ''.join(difflib.ndiff(firstlines, secondlines))\n            standardMsg = self._truncateMessage(standardMsg, diff)\n>           self.fail(self._formatMessage(msg, standardMsg))\n\nd:\\python37\\lib\\unittest\\case.py:1220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_logintest00001.openbrowser testMethod=test_openbrowser>\nmsg = \"'' != 'Google'\\n+ Google\"\n\n    def fail(self, msg=None):\n        \"\"\"Fail immediately, with the given message.\"\"\"\n>       raise self.failureException(msg)\nE       AssertionError: '' != 'Google'\nE       + Google\n\nd:\\python37\\lib\\unittest\\case.py:680: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_logintest00001.openbrowser testMethod=test_openbrowser>\n\n    @allure.severity(allure.severity_level.MINOR)\n    def test_openbrowser(self):\n      try:\n        #print('enter')\n        browser = reg.openbrowser()\n        time.sleep(3)\n        #reg.inputurl(browser)\n        gettitle = browser.title\n        print(gettitle)\n        self.assertEqual(gettitle, 'Google')\n            #print(\"pass\")\n      except Exception:\n        traceback.print_exc()\n        allure.attach(browser.get_screenshot_as_png(),name=\"title\",attachment_type=AttachmentType.PNG)\n        #browser.save_screenshot(folder_path+'\\Screenshots\\Testcase-%s.png' %tf)\n>       self.fail(\"Test case No failed\")\nE       AssertionError: Test case No failed\n\ntest_logintest00001.py:74: AssertionError"}, "attachments": [{"name": "title", "source": "5adf5258-95ec-412b-96d4-88f6caf774ff-attachment.png", "type": "image/png"}], "start": 1614005144929, "stop": 1614005155684, "uuid": "4410b223-d819-4507-94c3-f02131985e85", "historyId": "6322e9378e2d806cd5052ccb4211f048", "testCaseId": "0064531cb94af2373cfb75d8b8d3b4a6", "fullName": "test_logintest00001.openbrowser#test_openbrowser", "labels": [{"name": "severity", "value": "minor"}, {"name": "tag", "value": "regression"}, {"name": "suite", "value": "test_logintest00001"}, {"name": "subSuite", "value": "openbrowser"}, {"name": "host", "value": "User-PC"}, {"name": "thread", "value": "1840-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_logintest00001"}]}